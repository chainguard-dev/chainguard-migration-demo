name: Check Unique Tags for CVE fixes

on:
  schedule:
    - cron: "*/60 * * * *" # Every 60 minutes
  push:
    branches: [main]
    paths:
      - '.github/workflows/check-unique-tags.yml'
      - 'helm/redis/values.yaml'
  workflow_dispatch: # Allows manual triggering

env:
  REDIS_IMAGE: "cgr.dev/cgr-demo.com/redis-server-bitnami"
  
jobs:
  check-for-fixes:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          path: main

      - name: Setup Go environment
        uses: actions/setup-go@v5.1.0
      
      - name: Install Crane
        run: go install github.com/google/go-containerregistry/cmd/crane@latest

      - name: Install Grype
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
        
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.7.0
      
      - uses: chainguard-dev/setup-chainctl@v0.2.4
        with:
          identity: "4cf15780a13a9b6576d8b357e6524554c8c12a18/360614f2fd18f22d"
        
      - name: 'Auth to Registry'
        run: |
          chainctl auth configure-docker
  
      - name: Extract unique image.tag value
        id: extract_unique_tag
        run: |
          CURRENT_UNIQUE_IMAGE=$(yq '.image.tag' helm/redis/values.yaml)
          echo "Extracted Unique Tags: $CURRENT_UNIQUE_IMAGE"
          echo "CURRENT_UNIQUE_TAG=$CURRENT_UNIQUE_IMAGE" >> $GITHUB_ENV

      - name: Get latest unique tag
        id: get_current_unique_tag
        run: |
          LATEST_UNIQUE_TAG=$(crane ls ${{ env.REDIS_IMAGE }} | grep -E '^[^ ]+-[0-9]{12}$' | grep -v '^latest' | grep -v '\-dev' | sort -Vr | head -n 1)
          echo "LATEST_UNIQUE_TAG=${LATEST_UNIQUE_TAG}" >> $GITHUB_ENV

      - name: Compare unique tags
        id: compare_unique_tags
        run: |
          echo "CURRENT_UNIQUE_TAG=${{ env.CURRENT_UNIQUE_TAG }}"
          echo "LATEST_UNIQUE_TAG=${{ env.LATEST_UNIQUE_TAG }}"
          if [ "${{ env.CURRENT_UNIQUE_TAG }}" != "${{ env.LATEST_UNIQUE_TAG }}" ]; then
            echo "UNIQUE_TAGS_CHANGED=true" >> $GITHUB_ENV
          else
            echo "UNIQUE_TAGS_CHANGED=false" >> $GITHUB_ENV
          fi

      - name: Run chainctl images diff
        if: env.UNIQUE_TAGS_CHANGED == 'true'
        id: diff_vulnerabilities
        run: |
          OLD_IMAGE="${{ env.REDIS_IMAGE }}:${{ env.CURRENT_UNIQUE_TAG }}"
          NEW_IMAGE="${{ env.REDIS_IMAGE }}:${{ env.LATEST_UNIQUE_TAG }}"

          CVE_LIST_JSON=$(chainctl images diff $OLD_IMAGE $NEW_IMAGE 2>/dev/null | jq -c '[.vulnerabilities.removed[] | select(.severity == "Critical" or .severity == "High") | .id]')
          echo "CVE_LIST=$CVE_LIST_JSON" >> $GITHUB_ENV

          if [ -n "$CVE_LIST_JSON" ]; then
            echo "Found CVE fixes for the following CVES: $CVE_LIST_JSON"
            echo "FIX_CVE=true" >> $GITHUB_ENV
          else
            echo "No CVE fixes available"
            echo "FIX_CVE=false" >> $GITHUB_ENV
          fi

      - name: Create a new branch and commit changes
        if: env.FIX_CVE == 'true'
        env:
          CI_COMMIT_MESSAGE: "Update Helm Redis Image Tag to ${LATEST_UNIQUE_TAG}"
          CI_COMMIT_AUTHOR: github-actions[bot]
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "${{ env.CI_COMMIT_AUTHOR }}"
          git config --global user.email "username@users.noreply.github.com"
          
          BRANCH_NAME="update-helm-redis-image-tag"
          git checkout -b $BRANCH_NAME
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git
          yq -i ".image.tag = \"${{ env.LATEST_UNIQUE_TAG }}\"" helm/redis/values.yaml
          git add helm/redis/values.yaml
          git commit -m "${{ env.CI_COMMIT_MESSAGE }}"
          git push
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Create a Pull Request
        if: env.FIX_CVE == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr create \
            --title "Update Redis image tag to ${{ env.LATEST_UNIQUE_TAG }}" \
            --body "This PR remdiates CVEs: ${{ env.CVE_LIST }}" \
            --head "${{ github.repository_owner }}:${{ env.BRANCH_NAME }}" \
            --base "main" \
            --label "CVE-fix"
